     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    16 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    17 00000000                                 		GLOBAL	_memtest_sub
    18 00000000                                 		EXTERN	_inthandler20, _inthandler21
    19 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    20 00000000                                 
    21                                          [SECTION .text]
    22 00000000                                 
    23 00000000                                 _io_hlt:	; void io_hlt(void);
    24 00000000 F4                              		HLT
    25 00000001 C3                              		RET
    26 00000002                                 
    27 00000002                                 _io_cli:	; void io_cli(void);
    28 00000002 FA                              		CLI
    29 00000003 C3                              		RET
    30 00000004                                 
    31 00000004                                 _io_sti:	; void io_sti(void);
    32 00000004 FB                              		STI
    33 00000005 C3                              		RET
    34 00000006                                 
    35 00000006                                 _io_stihlt:	; void io_stihlt(void);
    36 00000006 FB                              		STI
    37 00000007 F4                              		HLT
    38 00000008 C3                              		RET
    39 00000009                                 
    40 00000009                                 _io_in8:	; int io_in8(int port);
    41 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    42 0000000D B8 00000000                     		MOV		EAX,0
    43 00000012 EC                              		IN		AL,DX
    44 00000013 C3                              		RET
    45 00000014                                 
    46 00000014                                 _io_in16:	; int io_in16(int port);
    47 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    48 00000018 B8 00000000                     		MOV		EAX,0
    49 0000001D 66 ED                           		IN		AX,DX
    50 0000001F C3                              		RET
    51 00000020                                 
    52 00000020                                 _io_in32:	; int io_in32(int port);
    53 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    54 00000024 ED                              		IN		EAX,DX
    55 00000025 C3                              		RET
    56 00000026                                 
    57 00000026                                 _io_out8:	; void io_out8(int port, int data);
    58 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    60 0000002E EE                              		OUT		DX,AL
    61 0000002F C3                              		RET
    62 00000030                                 
    63 00000030                                 _io_out16:	; void io_out16(int port, int data);
    64 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    65 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    66 00000038 66 EF                           		OUT		DX,AX
    67 0000003A C3                              		RET
    68 0000003B                                 
    69 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    70 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    71 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    72 00000043 EF                              		OUT		DX,EAX
    73 00000044 C3                              		RET
    74 00000045                                 
    75 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    76 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    77 00000046 58                              		POP		EAX
    78 00000047 C3                              		RET
    79 00000048                                 
    80 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    81 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    82 0000004C 50                              		PUSH	EAX
    83 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    84 0000004E C3                              		RET
    85 0000004F                                 
    86 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    87 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    88 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    90 0000005E C3                              		RET
    91 0000005F                                 
    92 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    93 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    94 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    95 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    96 0000006E C3                              		RET
    97 0000006F                                 
    98 0000006F                                 _load_cr0:		; int load_cr0(void);
    99 0000006F 0F 20 C0                        		MOV		EAX,CR0
   100 00000072 C3                              		RET
   101 00000073                                 
   102 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   103 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   104 00000077 0F 22 C0                        		MOV		CR0,EAX
   105 0000007A C3                              		RET
   106 0000007B                                 
   107 0000007B                                 _asm_inthandler20:
   108 0000007B 06                              		PUSH	ES
   109 0000007C 1E                              		PUSH	DS
   110 0000007D 60                              		PUSHAD
   111 0000007E 89 E0                           		MOV		EAX,ESP
   112 00000080 50                              		PUSH	EAX
   113 00000081 66 8C D0                        		MOV		AX,SS
   114 00000084 8E D8                           		MOV		DS,AX
   115 00000086 8E C0                           		MOV		ES,AX
   116 00000088 E8 [00000000]                   		CALL	_inthandler20
   117 0000008D 58                              		POP		EAX
   118 0000008E 61                              		POPAD
   119 0000008F 1F                              		POP		DS
   120 00000090 07                              		POP		ES
   121 00000091 CF                              		IRETD
   122 00000092                                 
   123 00000092                                 _asm_inthandler21:
   124 00000092 06                              		PUSH	ES
   125 00000093 1E                              		PUSH	DS
   126 00000094 60                              		PUSHAD
   127 00000095 89 E0                           		MOV		EAX,ESP
   128 00000097 50                              		PUSH	EAX
   129 00000098 66 8C D0                        		MOV		AX,SS
   130 0000009B 8E D8                           		MOV		DS,AX
   131 0000009D 8E C0                           		MOV		ES,AX
   132 0000009F E8 [00000000]                   		CALL	_inthandler21
   133 000000A4 58                              		POP		EAX
   134 000000A5 61                              		POPAD
   135 000000A6 1F                              		POP		DS
   136 000000A7 07                              		POP		ES
   137 000000A8 CF                              		IRETD
   138 000000A9                                 
   139 000000A9                                 _asm_inthandler27:
   140 000000A9 06                              		PUSH	ES
   141 000000AA 1E                              		PUSH	DS
   142 000000AB 60                              		PUSHAD
   143 000000AC 89 E0                           		MOV		EAX,ESP
   144 000000AE 50                              		PUSH	EAX
   145 000000AF 66 8C D0                        		MOV		AX,SS
   146 000000B2 8E D8                           		MOV		DS,AX
   147 000000B4 8E C0                           		MOV		ES,AX
   148 000000B6 E8 [00000000]                   		CALL	_inthandler27
   149 000000BB 58                              		POP		EAX
   150 000000BC 61                              		POPAD
   151 000000BD 1F                              		POP		DS
   152 000000BE 07                              		POP		ES
   153 000000BF CF                              		IRETD
   154 000000C0                                 
   155 000000C0                                 _asm_inthandler2c:
   156 000000C0 06                              		PUSH	ES
   157 000000C1 1E                              		PUSH	DS
   158 000000C2 60                              		PUSHAD
   159 000000C3 89 E0                           		MOV		EAX,ESP
   160 000000C5 50                              		PUSH	EAX
   161 000000C6 66 8C D0                        		MOV		AX,SS
   162 000000C9 8E D8                           		MOV		DS,AX
   163 000000CB 8E C0                           		MOV		ES,AX
   164 000000CD E8 [00000000]                   		CALL	_inthandler2c
   165 000000D2 58                              		POP		EAX
   166 000000D3 61                              		POPAD
   167 000000D4 1F                              		POP		DS
   168 000000D5 07                              		POP		ES
   169 000000D6 CF                              		IRETD
   170 000000D7                                 
   171 000000D7                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   172 000000D7 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   173 000000D8 56                              		PUSH	ESI
   174 000000D9 53                              		PUSH	EBX
   175 000000DA BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   176 000000DF BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   177 000000E4 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   178 000000E8                                 mts_loop:
   179 000000E8 89 C3                           		MOV		EBX,EAX
   180 000000EA 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   181 000000F0 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   182 000000F2 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   183 000000F4 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   184 000000F7 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   185 000000F9 75 18                           		JNE		mts_fin
   186 000000FB 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   187 000000FE 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   188 00000100 75 11                           		JNE		mts_fin
   189 00000102 89 13                           		MOV		[EBX],EDX				; *p = old;
   190 00000104 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   191 00000109 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   192 0000010D 76 D9                           		JBE		mts_loop
   193 0000010F 5B                              		POP		EBX
   194 00000110 5E                              		POP		ESI
   195 00000111 5F                              		POP		EDI
   196 00000112 C3                              		RET
   197 00000113                                 mts_fin:
   198 00000113 89 13                           		MOV		[EBX],EDX				; *p = old;
   199 00000115 5B                              		POP		EBX
   200 00000116 5E                              		POP		ESI
   201 00000117 5F                              		POP		EDI
   202 00000118 C3                              		RET
